KCPSM3 Assembler log file for program 'picocode.psm'.
Generated by KCPSM3 version 1.20
Ken Chapman (Xilinx Ltd) 2004.

 Addr Code

 000                      ; -- BRIEF: Example program to send the number to the float point ALU
 000                      ;;----------------------------------
 000                      ;; ENTER THE NUMBERS IN HEX
 000                      ;;----------------------------------
 000                      ; Number one
 000                      CONSTANT NA1, 42      ;  35
 000                      CONSTANT NA2, 0C      ;
 000                      CONSTANT NA3, 00      ;
 000                      CONSTANT NA4, 00      ;
 000                      ; Number two
 000                      CONSTANT NB1, 42      ;   75
 000                      CONSTANT NB2, 96      ;
 000                      CONSTANT NB3, 00      ;
 000                      CONSTANT NB4, 00      ;
 000                      ; Operation  00 - add  01 --subtract
 000                      CONSTANT OPE, 00      ;
 000                      CONSTANT STA_ON, 01   ;
 000                      CONSTANT STA_OFF, 00  ;
 000                      ;;----------------------------------
 000                      ;; DO NOT NEED CHANGE NOTHING BELOW
 000                      ;;----------------------------------
 000                      ;--- NUMBER OF THE REGISTERS  ---
 000                      ;Result
 000                      CONSTANT pR1, 01      ;
 000                      CONSTANT pR2, 02      ;
 000                      CONSTANT pR3, 03      ;
 000                      CONSTANT pR4, 04      ;
 000                      ;first number
 000                      CONSTANT pA1, 05      ;
 000                      CONSTANT pA2, 06      ;
 000                      CONSTANT pA3, 07      ;
 000                      CONSTANT pA4, 08      ;
 000                      ;second number
 000                      CONSTANT pB1, 09      ;
 000                      CONSTANT pB2, 0A      ;
 000                      CONSTANT pB3, 0B      ;
 000                      CONSTANT pB4, 0C      ;
 000                      ;Operation subtract or add
 000                      CONSTANT pOP, 0D      ;
 000                      CONSTANT sta, 0E      ;
 000                      ;Result - return the result to simulate
 000                      CONSTANT pRp1, 0F     ;
 000                      CONSTANT pRp2, 10     ;
 000                      CONSTANT pRp3, 11     ;
 000                      CONSTANT pRp4, 12     ;
 000                      ;--- PROGRAM  ---
 000              output: 
 000                      ;output the number to the float point unit
 000                      ;First number
 000  00042               LOAD s0, NA1[42]
 001  2C005               OUTPUT s0, pA1[05]
 002  0000C               LOAD s0, NA2[0C]
 003  2C006               OUTPUT s0, pA2[06]
 004  00000               LOAD s0, NA3[00]
 005  2C007               OUTPUT s0, pA3[07]
 006  00000               LOAD s0, NA4[00]
 007  2C008               OUTPUT s0, pA4[08]
 008                      ;Second number
 008  00042               LOAD s0, NB1[42]
 009  2C009               OUTPUT s0, pB1[09]
 00A  00096               LOAD s0, NB2[96]
 00B  2C00A               OUTPUT s0, pB2[0A]
 00C  00000               LOAD s0, NB3[00]
 00D  2C00B               OUTPUT s0, pB3[0B]
 00E  00000               LOAD s0, NB4[00]
 00F  2C00C               OUTPUT s0, pB4[0C]
 010                      ;operation
 010  00000               LOAD s0, OPE[00]
 011  2C00D               OUTPUT s0, pOP[0D]
 012  00001               LOAD s0, STA_ON[01]
 013  2C00E               OUTPUT s0, sta[0E]
 014  3C001               ENABLE INTERRUPT
 015                loop: 
 015  34015               JUMP loop[015]
 016         int_routine: 
 016  00000               LOAD s0, STA_OFF[00]
 017  2C00E               OUTPUT s0, sta[0E]
 018  04101               INPUT s1, pR1[01]
 019  04202               INPUT s2, pR2[02]
 01A  04303               INPUT s3, pR3[03]
 01B  04404               INPUT s4, pR4[04]
 01C  2C10F               OUTPUT s1, pRp1[0F]
 01D  2C210               OUTPUT s2, pRp2[10]
 01E  2C311               OUTPUT s3, pRp3[11]
 01F  2C412               OUTPUT s4, pRp4[12]
 020  38001               RETURNI ENABLE
 021                      ;
 3FF                      ADDRESS 3FF           ;set interrupt vector
 3FF  34016               JUMP int_routine[016]
